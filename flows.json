[
    {
        "id": "281e0a510310e9c6",
        "type": "tab",
        "label": "Modbus Client",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6ad7c930.1a06b8",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#000000",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            }
        },
        "site": {
            "name": "Blinky-Lite-Tutorial",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "79250bf3.365cc4",
        "type": "mqtt-broker",
        "name": "MQTT Broker",
        "broker": "$(MQTTSERVERIP)",
        "port": "$(MQTTPORT)",
        "clientid": "$(MQTTCLIENTID)",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "4a8c3caa0ff9b87d",
        "type": "modbus-client",
        "name": "Slave",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "$(MODBUSIP)",
        "tcpPort": "$(MODBUSPORT)",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "",
        "unit_id": "1",
        "commandDelay": "5",
        "clientTimeout": "1500",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false
    },
    {
        "id": "30f384ea.cf21fc",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "Save tray config in Memory",
        "func": "msg.payload.watchdog.value = 0;\nlet tray = msg.payload;\nflow.set('tray', msg.payload);\nlet modbusCubes = [];\nlet modbusSettingCubes = [];\nlet keys = Object.keys(msg.payload)\nfor (let ikey  in keys)\n{\n    if (msg.payload[keys[ikey]].hasOwnProperty('type'))\n    {\n        if (msg.payload[keys[ikey]].hasOwnProperty('modbus')) \n        {\n            modbusCubes.push(keys[ikey]);\n            if (msg.payload[keys[ikey]].action == \"setting\") \n            {\n                modbusSettingCubes.push(keys[ikey]);\n            }\n        }\n    }\n}\nflow.set('modbusCubes', modbusCubes);\nflow.set('modbusSettingCubes', modbusSettingCubes);\nlet modbusMsg = [];\nfor (let icube in modbusCubes) \n{\n    if (tray[modbusCubes[icube]].modbus.type == \"holding\") \n    {\n        let newVal = tray[modbusCubes[icube]].value;\n        newVal = Math.round(newVal * tray[modbusCubes[icube]].modbus.res);\n        if (tray[modbusCubes[icube]].modbus.signed) {\n            if (newVal > 32767) newVal = 32767;\n            if (newVal < -32767) newVal = -32767;\n            if (newVal < 0) newVal = newVal + 65536;\n        }\n        if (newVal < 0) newVal = 0;\n        if (newVal >= 65536) newVal = 65535;\n        modbusMsg.push({ value: newVal, 'fc': 0x6, 'unitid': 1, 'address': tray[modbusCubes[icube]].modbus.address, 'quantity': 1 });\n    }\n    if (tray[modbusCubes[icube]].modbus.type == \"coil\") \n    {\n        let newVal = tray[modbusCubes[icube]].value;\n        modbusMsg.push({ value: newVal, 'fc': 0x5, 'unitid': 1, 'address': tray[modbusCubes[icube]].modbus.address, 'quantity': 1 });\n    }\n}\ntray.trayControl.value = 0;\nreturn [{ topic: \"modbusConfig\", payload: modbusMsg },{topic: 'setting', payload:{'cube':'trayControl', value:tray.trayControl.value}}];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 480,
        "wires": [
            [
                "099a4107bd867ee7"
            ],
            [
                "e6028ca70b6042d8"
            ]
        ]
    },
    {
        "id": "5023092b.a0fe38",
        "type": "mqtt in",
        "z": "281e0a510310e9c6",
        "name": "Subscribe Settings",
        "topic": "",
        "qos": "0",
        "datatype": "auto",
        "broker": "79250bf3.365cc4",
        "nl": false,
        "rap": false,
        "inputs": 1,
        "x": 150,
        "y": 360,
        "wires": [
            [
                "f812bb6a.1aec68"
            ]
        ]
    },
    {
        "id": "49c7b59e.00e86c",
        "type": "inject",
        "z": "281e0a510310e9c6",
        "name": "initFlow",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "initFlow",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 100,
        "wires": [
            [
                "f7b2b73c.569598"
            ]
        ]
    },
    {
        "id": "f7b2b73c.569598",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "Init flow Variables",
        "func": "var trayProps = {\n    box         :   env.get(\"BOX\"),\n    type        :   env.get(\"TRAYTYPE\"),\n    name        :   env.get(\"TRAYNAME\"),\n};\nflow.set(\"testMode\",env.get(\"TESTMODE\"));\nflow.set('trayProps',trayProps);\nflow.set('settingInProgress', false);\nflow.set('tray', null);\nreturn {topic: \"getTrayProps\", payload: true};  \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 100,
        "wires": [
            [
                "d3215282604f589f",
                "a1ac9e631b1c38ed"
            ]
        ]
    },
    {
        "id": "f812bb6a.1aec68",
        "type": "json",
        "z": "281e0a510310e9c6",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 330,
        "y": 360,
        "wires": [
            [
                "e0d2b8e49c2e469b"
            ]
        ]
    },
    {
        "id": "5152879001ec63ea",
        "type": "mqtt out",
        "z": "281e0a510310e9c6",
        "name": "Publish Readings",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "79250bf3.365cc4",
        "x": 1770,
        "y": 340,
        "wires": []
    },
    {
        "id": "f9be9054ce456982",
        "type": "switch",
        "z": "281e0a510310e9c6",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "setting",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ping",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "config",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "echo",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 670,
        "y": 360,
        "wires": [
            [
                "fcc98447c16c3949"
            ],
            [
                "4cedc086c72eda01"
            ],
            [
                "47de6287cc26419f"
            ],
            [
                "30f384ea.cf21fc"
            ]
        ]
    },
    {
        "id": "e0d2b8e49c2e469b",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "Filter MQTT",
        "func": "return {topic:msg.topic.split('/')[5], payload:msg.payload};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 360,
        "wires": [
            [
                "f9be9054ce456982"
            ]
        ]
    },
    {
        "id": "f75b9887786b11c4",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "Publish tray",
        "func": "if (!msg.payload) return null;\nvar tray = flow.get('tray');\nif (tray == null) return null;\nlet newMsg = null;\nlet newMsgTopic = flow.get('trayProps').box + '/tray/' + flow.get('trayProps').type + '/' + flow.get('trayProps').name + '/reading';\nswitch( tray.trayControl.value)\n{\n    case 0:\n        newMsg = {topic: newMsgTopic, payload: JSON.stringify(tray)};\n        break;\n    case -1:\n        tray.trayControl.value = 1;\n        newMsg = {topic: newMsgTopic, payload: JSON.stringify(tray)};\n        break;\n    default:\n        break;\n}\nreturn newMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 340,
        "wires": [
            [
                "5152879001ec63ea"
            ]
        ]
    },
    {
        "id": "45a97566b65c65cc",
        "type": "link in",
        "z": "281e0a510310e9c6",
        "name": "Publish Tray In",
        "links": [
            "0bf699584a2609d5",
            "6af21e76e0c4ad80",
            "86aff585d6d97f09",
            "91cded1b31446957",
            "a66ef2e5b482662a",
            "df03212a7e41deb1",
            "f0c1e263384a520f",
            "f5d0568e288098ed",
            "3fc0261f194a7067",
            "396e4a58f43bbdef",
            "de9724337ab6b427",
            "184fe4c567bcfc8d",
            "bd491678f8e24259",
            "974629da19a525ea",
            "501090a1fd5f88f5"
        ],
        "x": 1475,
        "y": 340,
        "wires": [
            [
                "f75b9887786b11c4"
            ]
        ]
    },
    {
        "id": "47de6287cc26419f",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "Save config file",
        "func": "let cubeAlarm = flow.get('tray')[msg.payload.cube].alarm;\ncubeAlarm.limits.lolo = msg.payload.limits.lolo;\ncubeAlarm.limits.low  = msg.payload.limits.low;\ncubeAlarm.limits.high = msg.payload.limits.high;\ncubeAlarm.limits.hihi = msg.payload.limits.hihi;\ncubeAlarm.notify.name = msg.payload.notify.name;\ncubeAlarm.notify.number = msg.payload.notify.number;\nreturn { topic: 'newData', payload: true };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 400,
        "wires": [
            [
                "501090a1fd5f88f5"
            ]
        ]
    },
    {
        "id": "c2d22bcc1f4cf7b0",
        "type": "inject",
        "z": "281e0a510310e9c6",
        "name": "Archive clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "20",
        "topic": "archiveClock",
        "payloadType": "date",
        "x": 160,
        "y": 820,
        "wires": [
            [
                "6a9b2f2af2f7d084"
            ]
        ]
    },
    {
        "id": "6a9b2f2af2f7d084",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "Archive Pulse",
        "func": "var tray = flow.get('tray');\nif (tray == null) return null;\nvar lastArchive = context.get('lastArchive');\nvar now = new Date().getTime();\nif ((now - lastArchive) <= tray.arcPeriod) return null;\ncontext.set('lastArchive', now);\nreturn {topic:'archivePulse', payload:true};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastArchive', new Date().getTime());",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 820,
        "wires": [
            [
                "d74e019a27b1a659"
            ]
        ]
    },
    {
        "id": "fd6a29d4dda908dd",
        "type": "inject",
        "z": "281e0a510310e9c6",
        "name": "Archive now",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "archiveNow",
        "payloadType": "date",
        "x": 150,
        "y": 880,
        "wires": [
            [
                "76d6712bed883108"
            ]
        ]
    },
    {
        "id": "76d6712bed883108",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "Single Archive Pulse",
        "func": "return {topic:'archivePulse', payload:true};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastArchive', new Date().getTime());",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 880,
        "wires": [
            [
                "d74e019a27b1a659"
            ]
        ]
    },
    {
        "id": "501090a1fd5f88f5",
        "type": "link out",
        "z": "281e0a510310e9c6",
        "name": "Save config file out",
        "links": [
            "04d132d87ffeb91a",
            "45a97566b65c65cc"
        ],
        "x": 1035,
        "y": 400,
        "wires": []
    },
    {
        "id": "45409b1230e854cd",
        "type": "mqtt out",
        "z": "281e0a510310e9c6",
        "name": "Publish Archive",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "79250bf3.365cc4",
        "x": 780,
        "y": 820,
        "wires": []
    },
    {
        "id": "d74e019a27b1a659",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "Publish tray",
        "func": "if (!msg.payload) return null;\nvar tray = flow.get('tray');\nif (tray == null) return null;\nvar newMsg = \n{\n    topic: flow.get('trayProps').box + '/tray/' + flow.get('trayProps').type + '/' + flow.get('trayProps').name + '/archive',\n    payload: JSON.stringify(tray)\n};\nreturn  newMsg;  \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 820,
        "wires": [
            [
                "45409b1230e854cd"
            ]
        ]
    },
    {
        "id": "fcc98447c16c3949",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "Create Setting",
        "func": "let modBusSettingMsg = null;\nlet normalSettingMsg = null;\nlet trayControlMessage = null;\nlet tray = flow.get('tray');\nif (tray == null) return [modBusSettingMsg,normalSettingMsg,trayControlMessage];\nlet modbusSettingCubes = flow.get('modbusSettingCubes');\nlet icube = modbusSettingCubes.indexOf(msg.payload.cube);\n\nif (icube >= 0)\n{\n    let view = new DataView(new ArrayBuffer(4));\n    switch (tray[modbusSettingCubes[icube]].modbus.format)\n    {\n        case 'int32':\n            view.setInt32(0, msg.payload.value);\n            break;\n        case 'float32':\n            view.setFloat32(0, msg.payload.value);\n            break;\n        default:\n            break;\n    }\n/*\n    modBusSettingMsg = \n    {\n        topic: modbusSettingCubes[icube], \n        payload:[\n            { value: view.getUint16(0), 'fc': 0x6, 'unitid': 1, 'address': tray[modbusSettingCubes[icube]].modbus.address + 0, 'quantity': 1 },\n            { value: view.getUint16(2), 'fc': 0x6, 'unitid': 1, 'address': tray[modbusSettingCubes[icube]].modbus.address + 1, 'quantity': 1 }]\n    };\n*/\n    modBusSettingMsg = \n    {\n        topic: modbusSettingCubes[icube], \n        payload:{ value: [view.getUint16(0),view.getUint16(2)], 'fc': 0x10, 'unitid': 1, 'address': tray[modbusSettingCubes[icube]].modbus.address + 0, 'quantity': 2}\n    };\n    flow.set('settingInProgress', true);\n    return [modBusSettingMsg,normalSettingMsg,trayControlMessage];\n}\n\nswitch (msg.payload.cube) \n{\n    case 'alias':\n        tray.alias.value = msg.payload.value;\n        normalSettingMsg = { topic: 'newData', payload: true };\n       break;\n    case 'trayControl':\n        switch(msg.payload.value)\n        {\n            case 0:\n                tray.trayControl.value = 0;\n                break;\n            case 1:\n                tray.trayControl.value = -1;\n                break;\n            case 2:\n                if (tray.trayControl.value > 0)\n                {\n                    tray.trayControl.value = 2;\n                    let trayProps  = flow.get('trayProps');\n                    node.warn(\"Asking for tray from database\");\n                    trayControlMessage =\n                    {\n                        topic: trayProps.box + '/tray/' + trayProps.type + '/' + trayProps.name + '/echo',\n                        payload: JSON.stringify({ topic: trayProps.box + '/tray/' + trayProps.type + '/' + trayProps.name + '/setting/echo' })\n                    };\n                }\n                break;\n            default:\n                tray.trayControl.value = 0;\n                break;\n        }\n        normalSettingMsg = { topic: 'newData', payload: true };\n       break;\n    default:\n        break;\n}\nflow.set('settingInProgress', false);\nreturn [modBusSettingMsg,normalSettingMsg,trayControlMessage];\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 260,
        "wires": [
            [
                "3744a97333f32473"
            ],
            [
                "de9724337ab6b427"
            ],
            [
                "6c29d83d29cb0f0b"
            ]
        ]
    },
    {
        "id": "99fbe8135d0ce161",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "Readings Alarm Scan",
        "func": "var newData = msg.payload;\nvar tray = flow.get('tray');\nif (tray == null) return null;\ntray.watchdog.value = tray.watchdog.value + 1;\nif (tray.watchdog.value > 32760) tray.watchdog.value = 0;\nvar alarmFlagReading = scalarAlarmScan(tray, 'reading');\nvar alarmFlagSetting = scalarAlarmScan(tray, 'setting');\nvar newMsg   = null;\nif (newData)\n{\n    newMsg = \n    {\n        topic: 'newData',\n        payload: true\n    }\n}\nreturn newMsg;\n\nfunction getActionArray(tray, type, actionType)\n{\n    var actionArray = [];\n    var keys = Object.keys(tray);\n    for (var ii = 0; ii < keys.length; ++ii)\n    {\n        if (tray[keys[ii]].hasOwnProperty('type'))\n        {\n            if (tray[keys[ii]].type == type)\n            {\n                if (tray[keys[ii]].action == actionType)\n                {\n                    actionArray.push(tray[keys[ii]]);\n                }\n            }\n        }\n    }\n    return actionArray;\n}\nfunction scalarAlarmScan(tray, actionType)\n{\n    var alarmFlag = false;\n    var actionArray = getActionArray(tray, 'scalar', actionType);\n    if (actionArray.length > 0)\n    {\n        for (var ii = 0; ii < actionArray.length; ++ii)\n        {\n            let oldAlarmValue = actionArray[ii].alarm.value;\n            actionArray[ii].alarm.value = 0;\n            if (!isNaN(actionArray[ii].value))\n            {\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.low)  actionArray[ii].alarm.value = 1;\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.lolo) actionArray[ii].alarm.value = 3;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.high) actionArray[ii].alarm.value = 2;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.hihi) actionArray[ii].alarm.value = 4;\n                if (actionArray[ii].alarm.value != oldAlarmValue) alarmFlag = true;\n            }\n        }\n    }\n    return alarmFlag;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastAlarm', -1);",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 660,
        "wires": [
            [
                "f5d0568e288098ed"
            ]
        ]
    },
    {
        "id": "f5d0568e288098ed",
        "type": "link out",
        "z": "281e0a510310e9c6",
        "name": "Alarm Scan out",
        "links": [
            "45a97566b65c65cc",
            "05c0c7b4f59ca88d"
        ],
        "x": 1435,
        "y": 660,
        "wires": []
    },
    {
        "id": "de9724337ab6b427",
        "type": "link out",
        "z": "281e0a510310e9c6",
        "name": "nonBlinkybusSetting Out",
        "mode": "link",
        "links": [
            "04d132d87ffeb91a",
            "45a97566b65c65cc",
            "05c0c7b4f59ca88d"
        ],
        "x": 1035,
        "y": 260,
        "wires": []
    },
    {
        "id": "4402bc5ad5b005a3",
        "type": "modbus-flex-write",
        "z": "281e0a510310e9c6",
        "name": "Set Modbus",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "server": "4a8c3caa0ff9b87d",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1270,
        "y": 220,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "3744a97333f32473",
        "type": "delay",
        "z": "281e0a510310e9c6",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1080,
        "y": 220,
        "wires": [
            [
                "4402bc5ad5b005a3",
                "f71e663d93186bcf"
            ]
        ]
    },
    {
        "id": "3f594171d5aa07ab",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "settingInProgress = false",
        "func": "flow.set('settingInProgress',false);\nreturn null;\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 160,
        "wires": []
    },
    {
        "id": "0518bb7bcaf9e999",
        "type": "inject",
        "z": "281e0a510310e9c6",
        "name": "read Status",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "$(INTERVAL)",
        "crontab": "",
        "once": true,
        "onceDelay": "8",
        "topic": "readTable",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 660,
        "wires": [
            [
                "c59cae41fa3dfa4a"
            ]
        ]
    },
    {
        "id": "c59cae41fa3dfa4a",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "Setup read Modbus",
        "func": "if (flow.get('settingInProgress')) return null;\nlet tray = flow.get('tray');\nif (tray == null) return null;\nlet modbusCubes = flow.get('modbusCubes');\nlet modbusMsg = {};\nfor (let icube in modbusCubes) \n{\n        let datLen = 2;\n        modbusMsg[modbusCubes[icube]] = { 'fc': 0x3, 'unitid': 1, 'address': tray[modbusCubes[icube]].modbus.address, 'quantity': datLen };\n}\nreturn {topic: \"test\", payload:modbusMsg};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 660,
        "wires": [
            [
                "df7b35ddf84b179a"
            ]
        ]
    },
    {
        "id": "5d5f47a0eaae7c42",
        "type": "modbus-flex-getter",
        "z": "281e0a510310e9c6",
        "name": "Read Modbus ",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "4a8c3caa0ff9b87d",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": true,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 780,
        "y": 660,
        "wires": [
            [],
            [
                "65d1f50db1b29078"
            ]
        ]
    },
    {
        "id": "df7b35ddf84b179a",
        "type": "split",
        "z": "281e0a510310e9c6",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "topic",
        "x": 510,
        "y": 660,
        "wires": [
            [
                "5d5f47a0eaae7c42"
            ]
        ]
    },
    {
        "id": "65d1f50db1b29078",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "Parse Reading",
        "func": "flow.set('settingInProgress',false);\nlet tray = flow.get('tray');\nif (tray == null) return null;\nlet dataView  = new DataView(new ArrayBuffer(4));\nfor (let ib = 0; ib < 4; ++ib)   dataView.setUint8(ib, msg.payload.buffer[ib]);\nswitch (tray[msg.topic].modbus.format)\n{\n    case 'int32':\n        tray[msg.topic].value = dataView.getInt32(0);\n        break;\n    case 'float32':\n        tray[msg.topic].value = dataView.getFloat32(0);\n        break;\n    default:\n        break;\n}\nlet modbusCubes = flow.get('modbusCubes');\nlet icube = modbusCubes.indexOf(msg.topic);\nif (icube == (modbusCubes.length - 1)) return { topic: 'readingDone', payload: true }\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 660,
        "wires": [
            [
                "99fbe8135d0ce161"
            ]
        ]
    },
    {
        "id": "099a4107bd867ee7",
        "type": "split",
        "z": "281e0a510310e9c6",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1110,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "063def90cca3eae3",
        "type": "link out",
        "z": "281e0a510310e9c6",
        "name": "request tray echo out",
        "mode": "link",
        "links": [
            "f882c2407b2620be"
        ],
        "x": 1035,
        "y": 40,
        "wires": []
    },
    {
        "id": "f882c2407b2620be",
        "type": "link in",
        "z": "281e0a510310e9c6",
        "name": "request tray echo in",
        "links": [
            "063def90cca3eae3",
            "6c29d83d29cb0f0b"
        ],
        "x": 1625,
        "y": 280,
        "wires": [
            [
                "5152879001ec63ea"
            ]
        ]
    },
    {
        "id": "1a3f1121b7b0f033",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "Request tray from Database",
        "func": "let tray = flow.get('tray');\nif (tray != null) return [null,null];\nlet trayProps  = flow.get('trayProps');\nnode.warn(\"Asking for tray from database\");\nvar newMsg =\n{\n    topic: trayProps.box + '/tray/' + trayProps.type + '/' + trayProps.name + '/echo',\n    payload: JSON.stringify({ topic: trayProps.box + '/tray/' + trayProps.type + '/' + trayProps.name + '/setting/echo' })\n};\nreturn [newMsg, { topic: \"getTrayProps\", payload: true }];  \n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 100,
        "wires": [
            [
                "063def90cca3eae3"
            ],
            [
                "26dd391080aedecf"
            ]
        ]
    },
    {
        "id": "26dd391080aedecf",
        "type": "delay",
        "z": "281e0a510310e9c6",
        "name": "",
        "pauseType": "delay",
        "timeout": "30",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1080,
        "y": 120,
        "wires": [
            [
                "175febc97e8ae24a"
            ]
        ]
    },
    {
        "id": "175febc97e8ae24a",
        "type": "link out",
        "z": "281e0a510310e9c6",
        "name": "check for tray defined out",
        "mode": "link",
        "links": [
            "2545c4a66f386231"
        ],
        "x": 1215,
        "y": 40,
        "wires": []
    },
    {
        "id": "2545c4a66f386231",
        "type": "link in",
        "z": "281e0a510310e9c6",
        "name": "check for tray defined in",
        "links": [
            "175febc97e8ae24a"
        ],
        "x": 665,
        "y": 40,
        "wires": [
            [
                "1a3f1121b7b0f033"
            ]
        ]
    },
    {
        "id": "4cedc086c72eda01",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "prep ping",
        "func": "return {topic:'newData', payload:true};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 340,
        "wires": [
            [
                "bd491678f8e24259"
            ]
        ]
    },
    {
        "id": "bd491678f8e24259",
        "type": "link out",
        "z": "281e0a510310e9c6",
        "name": "ping out",
        "mode": "link",
        "links": [
            "e90864c178e3c08e",
            "45a97566b65c65cc"
        ],
        "x": 1035,
        "y": 340,
        "wires": []
    },
    {
        "id": "21ead1f81b53e80b",
        "type": "link in",
        "z": "281e0a510310e9c6",
        "name": "setting switch in",
        "links": [
            "e6028ca70b6042d8"
        ],
        "x": 545,
        "y": 420,
        "wires": [
            [
                "f9be9054ce456982"
            ]
        ]
    },
    {
        "id": "e6028ca70b6042d8",
        "type": "link out",
        "z": "281e0a510310e9c6",
        "name": "save tray config out",
        "mode": "link",
        "links": [
            "21ead1f81b53e80b"
        ],
        "x": 1085,
        "y": 540,
        "wires": []
    },
    {
        "id": "6c29d83d29cb0f0b",
        "type": "link out",
        "z": "281e0a510310e9c6",
        "name": "trayControl Out",
        "mode": "link",
        "links": [
            "f5153c8898e1a608",
            "f882c2407b2620be"
        ],
        "x": 1035,
        "y": 300,
        "wires": []
    },
    {
        "id": "d3215282604f589f",
        "type": "delay",
        "z": "281e0a510310e9c6",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 540,
        "y": 100,
        "wires": [
            [
                "1a3f1121b7b0f033"
            ]
        ]
    },
    {
        "id": "a1ac9e631b1c38ed",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "MQTT subscribe topic",
        "func": "let subscribeTopic = flow.get('trayProps').box + \"/tray/\" + flow.get('trayProps').type +'/' + flow.get('trayProps').name + \"/setting/#\";\nreturn {action:\"subscribe\",topic:subscribeTopic};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 280,
        "wires": [
            [
                "5023092b.a0fe38"
            ]
        ]
    },
    {
        "id": "f71e663d93186bcf",
        "type": "delay",
        "z": "281e0a510310e9c6",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1260,
        "y": 160,
        "wires": [
            [
                "3f594171d5aa07ab"
            ]
        ]
    }
]